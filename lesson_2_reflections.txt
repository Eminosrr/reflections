What happens when you initialize a repository? Why do you need to do it?
When you initialize a repository, the changes in the folder can be tracked by Git now. You can use it for version control and also share it in GitHub to use it in more than one PCs.

How is the staging area different from the working directory and the repository? What value do you think it offers?
It is an intermediate stage between working directory and repository before committing.

How can you use the staging area to make sure you have one commit per logical change?
You can upload only the files with related changes to the logical change to the staging area.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When there is one root code, but you want to modify it to evolve new code from the previous branch. Or doing an experimental chain of changes to see if it will merge in the future.

How do the diagrams help you visualize the branch structure?
It shows the relation between commits, and reachability.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result of merging two branches is clearly self-explanatory. It merges the additions and deletions made in two different branches originated from a single branch at a time. The representations of the merging that one branch lines up with another is because a branch was already an additional feature or an experimental trial which was meant to merge into the main branch if successful.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros of merging manually is that you are always in control of your code, but it is something time consuming and comes with human error. However, automatically merging is an automated version of  merging the branches and it even asks you how to resolve if there is a conflict between two commits.